import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/circular-json/build/circular-json.node.js
var require_circular_json_node = __commonJS({
  "node_modules/circular-json/build/circular-json.node.js"(exports, module) {
    var specialChar = "~";
    var safeSpecialChar = "\\x" + ("0" + specialChar.charCodeAt(0).toString(16)).slice(-2);
    var escapedSafeSpecialChar = "\\" + safeSpecialChar;
    var specialCharRG = new RegExp(safeSpecialChar, "g");
    var safeSpecialCharRG = new RegExp(escapedSafeSpecialChar, "g");
    var safeStartWithSpecialCharRG = new RegExp("(?:^|([^\\\\]))" + escapedSafeSpecialChar);
    var indexOf = [].indexOf || function(v) {
      for (var i = this.length; i-- && this[i] !== v; )
        ;
      return i;
    };
    var $String = String;
    function generateReplacer(value, replacer, resolve) {
      var doNotIgnore = false, inspect = !!replacer, path = [], all = [value], seen = [value], mapp = [resolve ? specialChar : "[Circular]"], last = value, lvl = 1, i, fn;
      if (inspect) {
        fn = typeof replacer === "object" ? function(key, value2) {
          return key !== "" && replacer.indexOf(key) < 0 ? void 0 : value2;
        } : replacer;
      }
      return function(key, value2) {
        if (inspect)
          value2 = fn.call(this, key, value2);
        if (doNotIgnore) {
          if (last !== this) {
            i = lvl - indexOf.call(all, this) - 1;
            lvl -= i;
            all.splice(lvl, all.length);
            path.splice(lvl - 1, path.length);
            last = this;
          }
          if (typeof value2 === "object" && value2) {
            if (indexOf.call(all, value2) < 0) {
              all.push(last = value2);
            }
            lvl = all.length;
            i = indexOf.call(seen, value2);
            if (i < 0) {
              i = seen.push(value2) - 1;
              if (resolve) {
                path.push(("" + key).replace(specialCharRG, safeSpecialChar));
                mapp[i] = specialChar + path.join(specialChar);
              } else {
                mapp[i] = mapp[0];
              }
            } else {
              value2 = mapp[i];
            }
          } else {
            if (typeof value2 === "string" && resolve) {
              value2 = value2.replace(safeSpecialChar, escapedSafeSpecialChar).replace(specialChar, safeSpecialChar);
            }
          }
        } else {
          doNotIgnore = true;
        }
        return value2;
      };
    }
    function retrieveFromPath(current, keys) {
      for (var i = 0, length = keys.length; i < length; current = current[keys[i++].replace(safeSpecialCharRG, specialChar)])
        ;
      return current;
    }
    function generateReviver(reviver) {
      return function(key, value) {
        var isString = typeof value === "string";
        if (isString && value.charAt(0) === specialChar) {
          return new $String(value.slice(1));
        }
        if (key === "")
          value = regenerate(value, value, {});
        if (isString)
          value = value.replace(safeStartWithSpecialCharRG, "$1" + specialChar).replace(escapedSafeSpecialChar, safeSpecialChar);
        return reviver ? reviver.call(this, key, value) : value;
      };
    }
    function regenerateArray(root, current, retrieve) {
      for (var i = 0, length = current.length; i < length; i++) {
        current[i] = regenerate(root, current[i], retrieve);
      }
      return current;
    }
    function regenerateObject(root, current, retrieve) {
      for (var key in current) {
        if (current.hasOwnProperty(key)) {
          current[key] = regenerate(root, current[key], retrieve);
        }
      }
      return current;
    }
    function regenerate(root, current, retrieve) {
      return current instanceof Array ? regenerateArray(root, current, retrieve) : current instanceof $String ? current.length ? retrieve.hasOwnProperty(current) ? retrieve[current] : retrieve[current] = retrieveFromPath(
        root,
        current.split(specialChar)
      ) : root : current instanceof Object ? regenerateObject(root, current, retrieve) : current;
    }
    var CircularJSON = {
      stringify: function stringify(value, replacer, space, doNotResolve) {
        return CircularJSON.parser.stringify(
          value,
          generateReplacer(value, replacer, !doNotResolve),
          space
        );
      },
      parse: function parse(text, reviver) {
        return CircularJSON.parser.parse(
          text,
          generateReviver(reviver)
        );
      },
      parser: JSON
    };
    module.exports = CircularJSON;
  }
});

// dep:circular-json
var circular_json_default = require_circular_json_node();
export {
  circular_json_default as default
};
/*!
Copyright (C) 2013-2017 by Andrea Giammarchi - @WebReflection

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
//# sourceMappingURL=circular-json.js.map
